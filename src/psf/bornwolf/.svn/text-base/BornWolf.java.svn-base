//=====================================================================================
// Project: PSF Generator
// 
// Organization: Biomedical Imaging Group (BIG)
// Ecole Polytechnique Federale de Lausanne (EPFL)
// Lausanne, Switzerland
//
// Information: http://bigwww.epfl.ch/deconvolution/
//
// Reference:
// Alessandra Griffa, Nathalie Garin, Daniel Sage, 
// Comparison of Deconvolution Software in 3D Microscopy: A User Point of View
// G.I.T. Imaging & Microscopy, vol. 12, no. 1, pp. 43-45, March 2010.
// Available: http://bigwww.epfl.ch/publications/griffa1001.html
//
// Conditions of use:
// You'll be free to use this software for research purposes, but you
// should not redistribute it without our consent. In addition, we 
// expect you to include a citation or acknowledgment whenever 
// you present or publish results that are based on it.
//=====================================================================================


package psf.bw;

import imageware.Builder;
import imageware.ImageWare;

/**
 * This class generates the Born & Wolf PSF.
 * 
 * @author Hagai Kirshner, Biomedical Imaging Group, Ecole Polytechnique Federale de Lausanne (EPFL)
 */
public class BornWolf implements Runnable {
    
	static int	OVER_SAMPLING = 1;
	
	private BornWolfPSF bwPSF;
	private BornWolfParameters p;
	private int nx;
	private int ny;
	private int z;
	private boolean running = false;
		
	/**
	* Constructor.
	*/
	public BornWolf(BornWolfPSF bwPSF, int z) {
		this.bwPSF = bwPSF;
		this.nx = bwPSF.nx;
		this.ny = bwPSF.ny;
		this.z = z;
		// making a new copy of the parameters is required, as different threads use different "defocus" values.
		this.p = new BornWolfParameters(bwPSF.p);
	}
 
	public boolean isRunning() {
		return running;
	}
	
	/**
	 * Creates a 2D PSF image at a specified stage displacement.
	 */
	public void run() {
		
		running = true;
				
		// The center of the image in units of [pixels]
		double x0 = (nx-1)/2.0;
		double y0 = (ny-1)/2.0;

		// Lateral particle position in units of [pixels]
		double xp = x0;// 0.0/p.pixelSize;
		double yp = y0;// 0.0/p.pixelSize;

		// Radial locations.
		//double xpAbs = Math.abs(xp), ypAbs = Math.abs(yp);
		//double maxRadialDistanceInPixels = Math.round(Math.sqrt((xpAbs+nx-x0)*(xpAbs+nx-x0)+(ypAbs+ny-y0)*(ypAbs+ny-y0)))+1;
		int maxRadius = ((int) Math.round(Math.sqrt((nx-x0)*(nx-x0)+(ny-y0)*(ny-y0))))+1;
		double[] r = new double[maxRadius*OVER_SAMPLING];
		double[] h = new double[r.length];
		
		//p.defocus = stageDisplacement;
		//KirchhoffDiffractionRiemann I = new KirchhoffDiffractionRiemann(p,accuracy);
		KirchhoffDiffractionSimpson I = new KirchhoffDiffractionSimpson(p,bwPSF.accuracy);
		
		for (int n=0; n<r.length; n++) {
			r[n] = ((double)n)/((double)OVER_SAMPLING);
			h[n] = I.calculate(r[n]*p.lateralResolution);
			bwPSF.progress = bwPSF.progress + 1.0/(r.length+1);
		}
		
		// Linear interpolation of the pixels values
		ImageWare slice = Builder.create(nx, ny, 1, ImageWare.FLOAT);
		double rPixel, value;
		int index;
		for (int x=0; x<nx; x++)
			for (int y=0; y<ny; y++) {
				rPixel = Math.sqrt((x-xp)*(x-xp)+(y-yp)*(y-yp));								// radius of the current pixel in units of [pixels]
				index = (int) Math.floor(rPixel*OVER_SAMPLING);									// Index of nearest coordinate from bellow
				value = h[index] + (h[index+1]-h[index])*(rPixel-r[index])*OVER_SAMPLING ;		// Interpolated value.
				slice.putPixel(x, y, 0, value);
			}
		bwPSF.getPSF().putXY(0, 0, z, slice);
		
		bwPSF.progress = bwPSF.progress + 1.0/(r.length+1); // progress = 1
		
		running = false;
	}
}
